"use strict";(self.webpackChunknoslate_website=self.webpackChunknoslate_website||[]).push([[2250],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),l=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=l(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||c;return t?a.createElement(h,o(o({ref:n},s),{},{components:t})):a.createElement(h,o({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,o=new Array(c);o[0]=u;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var l=2;l<c;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4423:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>p,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const c={},o="heap command",p={unversionedId:"debugger/andb/heap",id:"debugger/andb/heap",title:"heap command",description:"heap space",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/debugger/andb/heap.md",sourceDirName:"debugger/andb",slug:"/debugger/andb/heap",permalink:"/en/docs/debugger/andb/heap",draft:!1,editUrl:"https://github.com/noslate-project/noslate/tree/main/site/docs/debugger/andb/heap.md",tags:[],version:"current",frontMatter:{},sidebar:"debugger",previous:{title:"v8 command",permalink:"/en/docs/debugger/andb/v8"},next:{title:"mm command",permalink:"/en/docs/debugger/andb/mm"}},i={},l=[{value:"heap space",id:"heap-space",level:2},{value:"heap page",id:"heap-page",level:2},{value:"heap summary",id:"heap-summary",level:2},{value:"heap find",id:"heap-find",level:2},{value:"heap snapshot",id:"heap-snapshot",level:2}],s={toc:l};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"heap-command"},"heap command"),(0,r.kt)("h2",{id:"heap-space"},"heap space"),(0,r.kt)("p",null,"Displays the space information of the V8 Heap."),(0,r.kt)("p",null,"The heap of V8 adopts the Space + Page structure, several Pages form a Space, and several Spaces form the V8 heap."),(0,r.kt)("p",null,"According to the new and old generation and their uses, it is divided into multiple Spaces such as new (new generation), new_lo (new generation large object), old (old generation), lo (old generation large object), ro (read-only object).\nThe size of the Page that is usually used to store small objects is 256K, and the Page that stores large objects contains only one object."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"heap space"),(0,r.kt)("li",{parentName:"ul"},"heap space ","[space_name]",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"space_name : old, new, lo, map, code etc.")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"heap space")," is used to display the space space usage within the v8 heap, where Commit is the size of the commit and Max is the maximum used size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(gdb) heap space\nSPACE NAME          COMMIT        MAX\nRO_SPACE      :     151552     262144\nMAP_SPACE     :     528384     528384\nCODE_SPACE    :     360448     360448\nCODE_LO_SPACE :      49152      49152\nOLD_SPACE     :    2781184    4616192\nLO_SPACE      :     401408     401408\nNEW_LO_SPACE  :          0          0\nNEW_SPACE     :    1048576\n - from_space :          0\n - to_space   :    1048576\nTotal Committed    5320704\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"heap space new")," \u663e\u793a new space (\u65b0\u751f\u4ee3\u5c0f\u5bf9\u8c61) \u7684\u6240\u6709 pages\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(gdb) heap space new\n    0x667900000 : size(262144), sweep(0), start(0x667900120)\n 0x176d3ce00000 : size(262144), sweep(0), start(0x176d3ce00120)\n 0x10d414980000 : size(262144), sweep(0), start(0x10d414980120)\n 0x159131e80000 : size(262144), sweep(0), start(0x159131e80120)\nTotal 4 pages.\n")),(0,r.kt)("h2",{id:"heap-page"},"heap page"),(0,r.kt)("p",null,"Displays all objects Brief of the specified Page."),(0,r.kt)("p",null,"Brief is a short string used to display objects on a single line, generally consisting of 2-3 parts.\nSuch as ",(0,r.kt)("inlineCode",{parentName:"p"},"<Type Info TagPointer>"),"\nFrom left to right, the first part is the object type, the middle part may show important tips, and the rightmost part shows the object's Tagging Pointer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<JsFunction setTimeout 0x37c04dfc74f9>\n")),(0,r.kt)("p",null,"Description ",(0,r.kt)("inlineCode",{parentName:"p"},"0x37c04dfc74f9")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"JsFunction")," object named ",(0,r.kt)("inlineCode",{parentName:"p"},"setTimeout"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"heap page ","[page_address]",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"page_address: V8 Page starting memory address")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(gdb) heap page 0x3c0214e40000\n0x3c0214e40120: <PropertyArray 0x3c0214e40120>\n0x3c0214e40140: <FunctionContext 0x3c0214e40140>\n0x3c0214e40168: <JsObject 0x3c0214e40168>\n0x3c0214e40180: <PropertyArray 0x3c0214e40180>\n0x3c0214e401a0: <FunctionContext 0x3c0214e401a0>\n0x3c0214e401c8: <JsObject 0x3c0214e401c8>\n0x3c0214e401e0: <PropertyArray 0x3c0214e401e0>\n0x3c0214e40200: <FunctionContext 0x3c0214e40200>\n0x3c0214e40228: <JsObject 0x3c0214e40228>\n0x3c0214e40240: <PropertyArray 0x3c0214e40240>\n0x3c0214e40260: <FunctionContext 0x3c0214e40260>\n0x3c0214e40288: <JsObject 0x3c0214e40288>\n0x3c0214e402a0: <PropertyArray 0x3c0214e402a0>\n0x3c0214e402c0: <FunctionContext 0x3c0214e402c0>\n0x3c0214e402e8: <JsObject 0x3c0214e402e8>\n0x3c0214e40300: <PropertyArray 0x3c0214e40300>\n0x3c0214e40320: <FunctionContext 0x3c0214e40320>\n0x3c0214e40348: <JsObject 0x3c0214e40348>\n0x3c0214e40360: <PropertyArray 0x3c0214e40360>\n0x3c0214e40380: <FunctionContext 0x3c0214e40380>\n0x3c0214e403a8: <JsObject 0x3c0214e403a8>\n0x3c0214e403c0: <PropertyArray 0x3c0214e403c0>\n0x3c0214e403e0: <FunctionContext 0x3c0214e403e0>\n0x3c0214e40408: <JsObject 0x3c0214e40408>\n0x3c0214e40420: <PropertyArray 0x3c0214e40420>\n0x3c0214e40438: <FunctionContext 0x3c0214e40438>\n...\n0x3c0214e503b0: <DescriptorArray 0x3c0214e503b0>\n0x3c0214e50440: <DescriptorArray 0x3c0214e50440>\n0x3c0214e504d0: <DescriptorArray 0x3c0214e504d0>\n0x3c0214e50530: <DescriptorArray 0x3c0214e50530>\n0x3c0214e505c0: <DescriptorArray 0x3c0214e505c0>\n0x3c0214e50650: <DescriptorArray 0x3c0214e50650>\n0x3c0214e506e0: <DescriptorArray 0x3c0214e506e0>\n0x3c0214e50770: <FreeSpace 0x3c0214e50770>\nTotal Cnt(1206)\nDumpChunk() takes 0.136 second(s).\n")),(0,r.kt)("h2",{id:"heap-summary"},"heap summary"),(0,r.kt)("p",null,"The abstract specifies the objects of the Space, sorted by map, and sorted by quantity."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"heap summary ","[space_name]",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"space_name: new, old, lo, new_lo etc.")))),(0,r.kt)("p",null,"The headers follow ",(0,r.kt)("inlineCode",{parentName:"p"},"Map"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Count"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Bytes"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Type"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(gdb) heap sum old\n0x2048032c0829:        1           24 JS_OBJECT_TYPE\n0x2048032c0fc1:        1           24 JS_OBJECT_TYPE\n0x2048032c1099:        1           24 JS_OBJECT_TYPE\n0x2048032c1129:        1           24 JS_OBJECT_TYPE\n0x2048032c11b9:        1           24 JS_OBJECT_TYPE\n0x2048032c2719:        1           24 JS_OBJECT_TYPE\n0x2048032c27a9:        1           24 JS_OBJECT_TYPE\n0x2048032c2839:        1           24 JS_OBJECT_TYPE\n0x2048032c2f89:        1           24 JS_OBJECT_TYPE\n0x2048032c3019:        1           24 JS_OBJECT_TYPE\n...\n0x2048032c0c61:      487        50352 FUNCTION_CONTEXT_TYPE\n0x0b6f27201469:      492        15744 CALL_HANDLER_INFO_TYPE\n0x0b6f27200ec9:      497        18112 FEEDBACK_METADATA_TYPE\n0x0b6f27200fe9:      519       103592 BYTECODE_ARRAY_TYPE\n0x0b6f27204c19:      636        71232 FUNCTION_TEMPLATE_INFO_TYPE\n0x0b6f272058c1:      646        20672 LOAD_HANDLER_TYPE\n0x0b6f27200891:      701       123768 SCOPE_INFO_TYPE\n0x0b6f27201979:      835        26720 CONS_ONE_BYTE_STRING_TYPE\n0x0b6f27200729:      900       157952 FIXED_ARRAY_TYPE\n0x0b6f27201421:      930        43808 PROPERTY_ARRAY_TYPE\n0x0b6f272006e1:     1068        59336 BYTE_ARRAY_TYPE\n0x0b6f27200241:     1239       197352 DESCRIPTOR_ARRAY_TYPE\n0x0b6f272009f9:     1312        20992 FOREIGN_TYPE\n0x2048032c0751:     1484        94976 JS_FUNCTION_TYPE\n0x0b6f27201781:     1688        40512 UNCOMPILED_DATA_WITHOUT_PREPARSE_DATA_TYPE\n0x2048032c03f1:     1843       103208 JS_FUNCTION_TYPE\n0x0b6f272012b9:     2200        52800 FEEDBACK_CELL_TYPE\n0x0b6f27200849:     2464       103056 ONE_BYTE_STRING_TYPE\n0x0b6f272008d9:     3525       197400 SHARED_FUNCTION_INFO_TYPE\n0x0b6f27200409:     6858       234808 ONE_BYTE_INTERNALIZED_STRING_TYPE\nShowMapSummary() takes 1.582 second(s).\n")),(0,r.kt)("h2",{id:"heap-find"},"heap find"),(0,r.kt)("p",null,"Find references in the V8 heap."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"heap find ","[space_name][tagging]",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"space_name: new, old, lo, new_lo etc."),(0,r.kt)("li",{parentName:"ul"},"tagging: Tagging Pointer of the target object")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(gdb) heap find old 0x3c0214e4c391\n<FixedArray 0x3c0214e49e69>\nfind 1\n(gdb) heap find old 0x3c0214e49e69\n<JsArray 0xe953ab26d1>\nfind 1\n(gdb) heap find old 0xe953ab26d1\n<JsObject 0xe953ab2389>\nfind 1\n")),(0,r.kt)("h2",{id:"heap-snapshot"},"heap snapshot"),(0,r.kt)("p",null,"Export Heap Snapshots."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"heap snapshot ","[filename]",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The default filename is ",(0,r.kt)("inlineCode",{parentName:"li"},"core.heapsnapshot"),".")))),(0,r.kt)("p",null,"If you specify filename, make sure the suffix is heapsnapshot, otherwise it will not be recognized by DevTool."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(gdb) heap snap\nSynchronize: (Strong roots)\nSynchronize: (Bootstrapper)\nSynchronize: (Relocatable)\nSynchronize: (Debugger)\nSynchronize: (Compilation cache)\nSynchronize: (Builtins)\nSynchronize: (Thread manager)\nOnStackTracedNodeSpace.Iterate NotImplemented.\nSynchronize: (Global handles)\nSynchronize: (Stack roots)\nSynchronize: (Handle scope)\nSynchronize: (Eternal handles)\nSynchronize: (Startup object cache)\nSynchronize: (Internalized strings)\nSynchronize: (External strings)\nIterated 1732 RO Heap Objects\nfailed RO Heap Object: 0\n(enum v8::internal::AllocationSpace) v8::internal::RO_SPACE\n(enum v8::internal::AllocationSpace) v8::internal::MAP_SPACE\n(enum v8::internal::AllocationSpace) v8::internal::CODE_SPACE\n(enum v8::internal::AllocationSpace) v8::internal::CODE_LO_SPACE\n(enum v8::internal::AllocationSpace) v8::internal::OLD_SPACE\n19.3%: 999.8/sec, Object(10000), Entry(34920), Edge(91684)\n(enum v8::internal::AllocationSpace) v8::internal::LO_SPACE\n(enum v8::internal::AllocationSpace) v8::internal::NEW_LO_SPACE\n(enum v8::internal::AllocationSpace) v8::internal::NEW_SPACE\nIterated 43904 Objects\nfailed HeapObject: 0\nheap snapshot written to 'core.heapsnapshot'\nGenerate() takes 14.629 second(s).\n")),(0,r.kt)("p",null,"It takes more time when there are many objects, which can take up to several hours depending on the number of nodes and edges."))}d.isMDXComponent=!0}}]);