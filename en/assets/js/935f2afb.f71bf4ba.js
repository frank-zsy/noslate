"use strict";(self.webpackChunknoslate_website=self.webpackChunknoslate_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"common":[{"type":"link","label":"Noslate Workers Introduction","href":"/en/docs/noslate_workers/intro","docId":"noslate_workers/intro"},{"type":"category","label":"Quick Start","collapsed":false,"collapsible":false,"items":[{"type":"link","label":"Deploy Noslate with Docker","href":"/en/docs/noslate_workers/getting_started/docker","docId":"noslate_workers/getting_started/docker"},{"type":"link","label":"Used in Alibaba Cloud Function Compute","href":"/en/docs/noslate_workers/getting_started/aliyun_fc","docId":"noslate_workers/getting_started/aliyun_fc"}]},{"type":"category","label":"Components Introduction","collapsed":false,"collapsible":false,"items":[{"type":"category","label":"Aworker","collapsed":false,"collapsible":false,"items":[{"type":"link","label":"Aworker Introduction","href":"/en/docs/noslate_workers/aworker/intro","docId":"noslate_workers/aworker/intro"},{"type":"link","label":"Web API","href":"/en/docs/noslate_workers/aworker/web-api","docId":"noslate_workers/aworker/web-api"},{"type":"link","label":"Serialize API","href":"/en/docs/noslate_workers/aworker/serialize-api","docId":"noslate_workers/aworker/serialize-api"}]},{"type":"link","label":"Noslated","href":"/en/docs/noslate_workers/noslated/intro","docId":"noslate_workers/noslated/intro"},{"type":"link","label":"Turf","href":"/en/docs/noslate_workers/turf/intro","docId":"noslate_workers/turf/intro"}]},{"type":"category","label":"Basic Concepts","collapsed":false,"collapsible":false,"items":[{"type":"link","label":"Worker Function Configuration","href":"/en/docs/noslate_workers/references/function_profile","docId":"noslate_workers/references/function_profile"},{"type":"link","label":"Service Routing Configuration","href":"/en/docs/noslate_workers/references/service_profile","docId":"noslate_workers/references/service_profile"},{"type":"link","label":"System Configuration","href":"/en/docs/noslate_workers/references/system_config","docId":"noslate_workers/references/system_config"},{"type":"link","label":"Environment Variable","href":"/en/docs/noslate_workers/references/envionment_variables","docId":"noslate_workers/references/envionment_variables"},{"type":"link","label":"Flexible Strategy","href":"/en/docs/noslate_workers/references/scale","docId":"noslate_workers/references/scale"},{"type":"link","label":"Noslated SDK","href":"/en/docs/noslate_workers/references/sdk","docId":"noslate_workers/references/sdk"},{"type":"link","label":"Outbound Service Proxy","href":"/en/docs/noslate_workers/references/outbound","docId":"noslate_workers/references/outbound"},{"type":"link","label":"Gateway","href":"/en/docs/noslate_workers/references/gateway","docId":"noslate_workers/references/gateway"}]},{"type":"category","label":"Tutorials","collapsed":false,"collapsible":false,"items":[{"type":"link","label":"Custom Gateway","href":"/en/docs/noslate_workers/tutorials/custom_gateway","docId":"noslate_workers/tutorials/custom_gateway"},{"type":"link","label":"Customize Outbound service proxy","href":"/en/docs/noslate_workers/tutorials/custom_outbound","docId":"noslate_workers/tutorials/custom_outbound"},{"type":"link","label":"\u5982\u4f55\u542f\u52a8 Noslate Workers","href":"/en/docs/noslate_workers/tutorials/start_noslate_workers","docId":"noslate_workers/tutorials/start_noslate_workers"}]},{"type":"link","label":"Version History","href":"https://github.com/noslate-project/noslate/releases"}],"api":[{"type":"category","label":"Noslated","collapsed":false,"collapsible":false,"items":[{"type":"link","label":"Noslated Client","href":"/en/docs/api/sdk","docId":"api/sdk"}]},{"type":"link","label":"Aworker","href":"https://noslate-project.github.io/aworker/"}],"node_js":[{"type":"link","label":"Noslate Node.js distribution introduction","href":"/en/docs/node_js/intro","docId":"node_js/intro"},{"type":"link","label":"Code execution acceleration","href":"/en/docs/node_js/rrc","docId":"node_js/rrc"},{"type":"link","label":"Platform Architecture-Oriented Optimization","href":"/en/docs/node_js/arch","docId":"node_js/arch"},{"type":"link","label":"Version History","href":"/en/docs/node_js/versions","docId":"node_js/versions"}],"debugger":[{"type":"link","label":"Noslate Debugger Introduction","href":"/en/docs/debugger/intro","docId":"debugger/intro"},{"type":"category","label":"Andb - Offline Debuger","collapsed":false,"collapsible":false,"items":[{"type":"link","label":"Debug with Linux","href":"/en/docs/debugger/andb/env_linux","docId":"debugger/andb/env_linux"},{"type":"link","label":"Debugging with MacOS","href":"/en/docs/debugger/andb/env_macos","docId":"debugger/andb/env_macos"},{"type":"category","label":"CLI","items":[{"type":"link","label":"Isolate command","href":"/en/docs/debugger/andb/isolate","docId":"debugger/andb/isolate"},{"type":"link","label":"v8 command","href":"/en/docs/debugger/andb/v8","docId":"debugger/andb/v8"},{"type":"link","label":"heap command","href":"/en/docs/debugger/andb/heap","docId":"debugger/andb/heap"},{"type":"link","label":"mm command","href":"/en/docs/debugger/andb/mm","docId":"debugger/andb/mm"}],"collapsed":false,"collapsible":true,"href":"/en/docs/debugger/andb/cli"}],"href":"/en/docs/debugger/andb/intro"},{"type":"category","label":"Arthur - CoreDumper","collapsed":false,"collapsible":false,"items":[{"type":"link","label":"Arthur","href":"/en/docs/debugger/arthur/intro","docId":"debugger/arthur/intro"}]},{"type":"category","label":"Dwf - Debug Info","collapsed":false,"collapsible":false,"items":[{"type":"link","label":"BuildID","href":"/en/docs/debugger/dwf/buildid","docId":"debugger/dwf/buildid"}],"href":"/en/docs/debugger/dwf/intro"}],"project":[{"type":"link","label":"Noslate Project Overview","href":"/en/docs/project/intro","docId":"project/intro"}]},"docs":{"api/sdk":{"id":"api/sdk","title":"Noslated Client","description":"","sidebar":"api"},"api/turf":{"id":"api/turf","title":"Turf","description":""},"debugger/andb/autolayout":{"id":"debugger/andb/autolayout","title":"AutoLayout","description":"\u4ec0\u4e48\u662f AutoLayout"},"debugger/andb/cli":{"id":"debugger/andb/cli","title":"Command Line","description":"The andb provides a unified command line through the debugger\'s command line interface.","sidebar":"debugger"},"debugger/andb/dbg":{"id":"debugger/andb/dbg","title":"dbg \u7edf\u4e00\u8c03\u8bd5\u5668","description":"gdb \u548c lldb \u7684\u533a\u522b"},"debugger/andb/develop":{"id":"debugger/andb/develop","title":"Andb \u5f00\u53d1","description":"Reload \u4ee3\u7801\u4fee\u6539"},"debugger/andb/env_linux":{"id":"debugger/andb/env_linux","title":"Debug with Linux","description":"System dependencies","sidebar":"debugger"},"debugger/andb/env_macos":{"id":"debugger/andb/env_macos","title":"Debugging with MacOS","description":"System dependencies","sidebar":"debugger"},"debugger/andb/heap":{"id":"debugger/andb/heap","title":"heap command","description":"heap space","sidebar":"debugger"},"debugger/andb/intro":{"id":"debugger/andb/intro","title":"Andb","description":"Noslate Debugger is a v8 offline debugging tool for gdb/lldb, generally used to debug v8 core files.","sidebar":"debugger"},"debugger/andb/isolate":{"id":"debugger/andb/isolate","title":"Isolate command","description":"Isolate guess","sidebar":"debugger"},"debugger/andb/live_proc":{"id":"debugger/andb/live_proc","title":"\u5982\u4f55\u8c03\u8bd5 Live \u8fdb\u7a0b","description":"Noslate Debugger \u867d\u7136\u662f\u4e00\u4e2a\u201c\u79bb\u7ebf\u201d\u8c03\u8bd5\u5de5\u5177\uff0c\u5b83\u4e5f\u53ef\u4ee5\u7528\u4e8e\u8c03\u8bd5 \\"Live\\" \u7684 Node.js \u8fdb\u7a0b\u3002"},"debugger/andb/mm":{"id":"debugger/andb/mm","title":"mm command","description":"mm map / list","sidebar":"debugger"},"debugger/andb/node":{"id":"debugger/andb/node","title":"node \u547d\u4ee4","description":""},"debugger/andb/v8":{"id":"debugger/andb/v8","title":"v8 command","description":"v8 version","sidebar":"debugger"},"debugger/arthur/intro":{"id":"debugger/arthur/intro","title":"Arthur","description":"Arthur uses fork() to reduce the pausing lag, and lz4 to reduce the corefile size.","sidebar":"debugger"},"debugger/dwf/buildid":{"id":"debugger/dwf/buildid","title":"BuildID","description":"Noslate Debugger uses the BuildID to associate the Corefile with the corresponding executable.","sidebar":"debugger"},"debugger/dwf/intro":{"id":"debugger/dwf/intro","title":"Debug info (Dwarf)","description":"Auto layout information for objects","sidebar":"debugger"},"debugger/intro":{"id":"debugger/intro","title":"Noslate Debugger Introduction","description":"Noslate Debugger","sidebar":"debugger"},"node_js/arch":{"id":"node_js/arch","title":"Platform Architecture-Oriented Optimization","description":"Why optimize for a specific platform architecture?","sidebar":"node_js"},"node_js/intro":{"id":"node_js/intro","title":"Introduction to the Noslate Node.js distribution","description":"Noslate Node.js Distribution","sidebar":"node_js"},"node_js/rrc":{"id":"node_js/rrc","title":"User code execution acceleration","description":"PGO (Profile Guided Optimization) is a technology that compiles and optimizes according to runtime Profiling Data. Here we draw on this concept. It mainly generates a cache file by collecting the hot data in the startup phase after executing it once, and then starting by loading an efficient cache file to obtain a 100% to 200% increase in the user code cold startup optimization effect.","sidebar":"node_js"},"node_js/versions":{"id":"node_js/versions","title":"Version history","description":"Version principle, tracking LTS version updates to provide versions, currently providing distributions since Node.js 16. The version history is as follows:","sidebar":"node_js"},"noslate_workers/aworker/intro":{"id":"noslate_workers/aworker/intro","title":"Aworker Introduction","description":"A Web-interoperable JavaScript runtime that provides Web API standards, suitable for business logic deployment that does not directly depend on system interfaces.","sidebar":"common"},"noslate_workers/aworker/serialize-api":{"id":"noslate_workers/aworker/serialize-api","title":"Serialize API","description":"Aworker provides user code APIs for saving and restoring user code state, which are used in Warmfork scenarios and Startup Snapshot scenarios.","sidebar":"common"},"noslate_workers/aworker/web-api":{"id":"noslate_workers/aworker/web-api","title":"Web API","description":"Aworker implements a specification similar to Service Worker API, providing a basic Request-Response service API.","sidebar":"common"},"noslate_workers/getting_started/aliyun_fc":{"id":"noslate_workers/getting_started/aliyun_fc","title":"Used in Alibaba Cloud Function Compute","description":"Alibaba Cloud Function Compute supports the use of container images as function deliverables, that is the Custom Container capability. Therefore, Noslate can be combined with Function Compute to achieve more fine-grained hierarchical scheduling capabilities.","sidebar":"common"},"noslate_workers/getting_started/docker":{"id":"noslate_workers/getting_started/docker","title":"Deploy Noslate with Docker","description":"Noslate can be quickly deployed into the existing cluster architecture in the form of Docker images, and cooperate with upper-level scheduling to achieve finer-grained scheduling and high-density deployment.","sidebar":"common"},"noslate_workers/intro":{"id":"noslate_workers/intro","title":"","description":"Noslate Workers - Lightweight JavaScript Serverless Solution","sidebar":"common"},"noslate_workers/noslated/intro":{"id":"noslate_workers/noslated/intro","title":"Noslated","description":"Noslate Container Deamon, as the core of the Noslate Serverless solution, provides Worker instance scheduling, elastic expansion, configuration management, traffic management and other capabilities required by Serverless.","sidebar":"common"},"noslate_workers/references/envionment_variables":{"id":"noslate_workers/references/envionment_variables","title":"Environment Variable","description":"Built-in environment","sidebar":"common"},"noslate_workers/references/function_profile":{"id":"noslate_workers/references/function_profile","title":"Worker Function Configuration","description":"Worker function meta information configuration is described in JSON format, and the specific fields are as follows:","sidebar":"common"},"noslate_workers/references/gateway":{"id":"noslate_workers/references/gateway","title":"Gateway","description":"It is mainly used to complete the docking with the external traffic portal, and realize the call to Noslate together with the SDK.","sidebar":"common"},"noslate_workers/references/outbound":{"id":"noslate_workers/references/outbound","title":"Outbound Service Proxy","description":"The runtime Aworker has limited file I/O and network I/O capabilities and therefore cannot access external services. In order to solve this problem, the outbound service proxy capability is added to Data Plane. In order to make it easier to understand, the Dapr calling format is selected as a reference, and the corresponding interface is designed.","sidebar":"common"},"noslate_workers/references/scale":{"id":"noslate_workers/references/scale","title":"Flexible Strategy","description":"The overall design concept of Noslated is that Worker instances are pulled up based on traffic, quickly expanded, and slowly reduced.","sidebar":"common"},"noslate_workers/references/sdk":{"id":"noslate_workers/references/sdk","title":"Noslated SDK","description":"The interface provided by Noslate is used to connect to the Gateway implementation and can be introduced through NOSLATEPATH.","sidebar":"common"},"noslate_workers/references/service_profile":{"id":"noslate_workers/references/service_profile","title":"Service Routing Configuration","description":"Noslated supports calling Worker functions in the form of services. A service can contain multiple Worker functions and their rates. It is generally used in grayscale publishing scenarios to prevent existing traffic from being affected.","sidebar":"common"},"noslate_workers/references/system_config":{"id":"noslate_workers/references/system_config","title":"System Configuration","description":"System configuration can be set in the form of configuration files, such as:","sidebar":"common"},"noslate_workers/references/workdir":{"id":"noslate_workers/references/workdir","title":"Working Directory Conventions","description":""},"noslate_workers/release_notes":{"id":"noslate_workers/release_notes","title":"Version history","description":"V0.0.1"},"noslate_workers/turf/intro":{"id":"noslate_workers/turf/intro","title":"Turf","description":"Under the Noslate architecture, the scheduling unit sinks from the previous container to the process, so resource isolation is very important. We are based on the capabilities provided by the Linux system,","sidebar":"common"},"noslate_workers/tutorials/custom_gateway":{"id":"noslate_workers/tutorials/custom_gateway","title":"Custom Gateway","description":"Following this tutorial, we will implement a custom Gateway module based on HTTP, and can store Worker function information persistently through sqllite.","sidebar":"common"},"noslate_workers/tutorials/custom_outbound":{"id":"noslate_workers/tutorials/custom_outbound","title":"Customize Outbound service proxy","description":"In this section, take the access database proxy as an example to introduce how to implement a custom proxy service:","sidebar":"common"},"noslate_workers/tutorials/logging":{"id":"noslate_workers/tutorials/logging","title":"Log","description":"Noslate will generate the following log when running:"},"noslate_workers/tutorials/start_noslate_workers":{"id":"noslate_workers/tutorials/start_noslate_workers","title":"\u5982\u4f55\u542f\u52a8 Noslate Workers","description":"\u5982 Noslate Workers \u4e2d\u4ecb\u7ecd\u7684\uff0cNoslate Workers \u5305\u542b\u591a\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u4ee5\u53ca\u7528\u6237\u81ea\u5b9a\u7684 Gateway\u3001Outbound \u4ee3\u7406\u7b49\uff0c\u56e0\u6b64\u5b83\u7684\u542f\u52a8\u6d41\u7a0b\u4e5f\u5c24\u4e3a\u91cd\u8981\u3002","sidebar":"common"},"project/intro":{"id":"project/intro","title":"Noslate Project Overview","description":"Noslate is an exploration of the evolution of the Node.js/V8 technology stack in the cloud-native era, aiming to improve the scheduling performance and diagnosing black-box problems of JavaScript in cloud-native scenarios. The goal is to allow JavaScript Workload to have higher scheduling flexibility in the cloud-native era. At present, the relevant software has been used in some enterprise online services. This project mainly consists of three sub-projects: Workers, Debugger, and Node.js Distribution.","sidebar":"project"}}}')}}]);