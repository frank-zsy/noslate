"use strict";(self.webpackChunknoslate_website=self.webpackChunknoslate_website||[]).push([[6205],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>_});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(n),_=o,f=p["".concat(l,".").concat(_)]||p[_]||c[_]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2257:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const i={},a="Debug info (Dwarf)",s={unversionedId:"debugger/dwf/intro",id:"debugger/dwf/intro",title:"Debug info (Dwarf)",description:"Auto layout information for objects",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/debugger/dwf/intro.md",sourceDirName:"debugger/dwf",slug:"/debugger/dwf/intro",permalink:"/en/docs/debugger/dwf/intro",draft:!1,editUrl:"https://github.com/noslate-project/noslate/tree/main/site/docs/debugger/dwf/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"debugger",previous:{title:"Arthur",permalink:"/en/docs/debugger/arthur/intro"},next:{title:"BuildID",permalink:"/en/docs/debugger/dwf/buildid"}},l={},d=[{value:"Auto layout information for objects",id:"auto-layout-information-for-objects",level:2},{value:"Display of source code to objects",id:"display-of-source-code-to-objects",level:2},{value:"Merge redundant nodes",id:"merge-redundant-nodes",level:2},{value:"Debug info repository",id:"debug-info-repository",level:2}],u={toc:d};function c(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"debug-info-dwarf"},"Debug info (Dwarf)"),(0,o.kt)("h2",{id:"auto-layout-information-for-objects"},"Auto layout information for objects"),(0,o.kt)("p",null,"Node uses different V8 versions that differ in object support.\nSome objects are also automatically generated using Torque, but eventually the C++ source code will be generated and compiled into the node binary."),(0,o.kt)("p",null,"Noslate Debugger obtains the Layout information of the object from the DebugInfo (debugging information) produced by the compiler, and automatically generates the corresponding object parsing function, DebugPrint and other implementations."),(0,o.kt)("div",{style:{maxWidth:"800px"}},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"CU Merge",src:n(4789).Z,width:"744",height:"235"}))),(0,o.kt)("h2",{id:"display-of-source-code-to-objects"},"Display of source code to objects"),(0,o.kt)("p",null,"DebugInfo stores a lot of debugging information such as C++ classes, structures, enumeration values, etc. These debugging information are used by debuggers such as ",(0,o.kt)("inlineCode",{parentName:"p"},"gdb"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"lldb")," to parse memory blocks and parse out user-readable content such as classes and structures .\nTo display the c++ structure object used by any Node.js / V8 engine, you need to find the corresponding structure subtree from the debugging information. The subtree tree describes the offset address and type of the memory where all members of this structure are located , size and other details. Most objects used by V8 inherit from ",(0,o.kt)("inlineCode",{parentName:"p"},"v8::internal::HeapObject"),", which is a C++ class definition of the system Pointer word width, but different objects have different layouts, and their information is corresponding to the subtree. Defined by the enumeration value of . For example, in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Oddbal")," object, its ",(0,o.kt)("inlineCode",{parentName:"p"},"ToString")," description will be described by ",(0,o.kt)("inlineCode",{parentName:"p"},"kToStringOffset = 16"),", this value may be different in different V8 implementations, but the correct value can be obtained from DebugInfo."),(0,o.kt)("p",null,"Noslate Debugger uses these structural information to write the Shadow engine for parsing V8 objects and executing the analysis logic in the Corefile."),(0,o.kt)("div",{style:{maxWidth:"600px"}},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"CU Merge",src:n(6397).Z,width:"560",height:"403"}))),(0,o.kt)("h2",{id:"merge-redundant-nodes"},"Merge redundant nodes"),(0,o.kt)("p",null,"A fully built Node.js Debug build up to 2.4 GB with 235.77 million DIEs, 768.83 million properties, a file size that cannot be distributed."),(0,o.kt)("p",null,"Noslate Debugger merges redundant debug info nodes into CU. After merging, the node.typ file is only 150MB, containing a total of 1.89 million DIEs and 5.46 million attributes."),(0,o.kt)("div",null,(0,o.kt)("p",null,(0,o.kt)("img",{alt:"CU Merge",src:n(4035).Z,width:"2340",height:"1603"}))),(0,o.kt)("p",null,"It also includes a large number of system header files and the debugging information defined in the dependency header files, so the node.typ version used by the online debugging information library is a further simplified version, which is more conducive to distribution at about 10MB.\nIt contains 440,000 DIEs and 1.37 million attributes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ls -al node.typ\n-rw------- 1 zlei users 13119741 Sep 27 11:00 node.typ\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$dwf -i node.typ\nsection .debug_abbrev, addr(0x7f17b5b653be), size(8219)\nsection .debug_info, addr(0x7f17b5b673d9), size(4404799)\nsection .debug_line, addr(0x7f17b67dd850), size(43181)\nsection .debug_str, addr(0x7f17b5f9aa18), size(8662584)\ndwf>sum .\n------ TAG (448021) -----\n  DW_TAG_unspecified_type : 1\n  DW_TAG_compile_unit : 1\n  DW_TAG_volatile_type : 12\n  DW_TAG_ptr_to_member_type : 12\n  DW_TAG_base_type : 20\n  DW_TAG_lexical_block : 85\n  DW_TAG_subroutine_type : 92\n  DW_TAG_namespace : 244\n  DW_TAG_array_type : 318\n  DW_TAG_union_type : 533\n  DW_TAG_GNU_template_template_param : 661\n  DW_TAG_rvalue_reference_type : 973\n  DW_TAG_enumeration_type : 2148\n  DW_TAG_variable : 3058\n  DW_TAG_GNU_template_parameter_pack : 3657\n  DW_TAG_formal_parameter : 4972\n  DW_TAG_subprogram : 7666\n  DW_TAG_imported_declaration : 7862\n  DW_TAG_pointer_type : 8012\n  DW_TAG_reference_type : 9668\n  DW_TAG_template_value_param : 12076\n  DW_TAG_const_type : 19645\n  DW_TAG_inheritance : 21288\n  DW_TAG_enumerator : 21788\n  DW_TAG_class_type : 22090\n  DW_TAG_structure_type : 38440\n  DW_TAG_member : 54438\n  DW_TAG_padding : 65946\n  DW_TAG_template_type_param : 70986\n  DW_TAG_typedef : 71329\n------ Attributes (1371821) -----\n  DW_AT_producer : 1\n  DW_AT_GNU_vector : 1\n  DW_AT_comp_dir : 1\n  DW_AT_language : 1\n  DW_AT_high_pc : 1\n  DW_AT_stmt_list : 1\n  DW_AT_low_pc : 1\n  DW_AT_location : 4\n  DW_AT_export_symbols : 5\n  DW_AT_use_location : 8\n  DW_AT_object_pointer : 16\n  DW_AT_prototyped : 33\n  DW_AT_specification : 41\n  DW_AT_bit_size : 123\n  DW_AT_bit_offset : 123\n  DW_AT_enum_class : 401\n  DW_AT_GNU_template_name : 661\n  DW_AT_const_expr : 1439\n  DW_AT_default_value : 1924\n  DW_AT_encoding : 2168\n  DW_AT_containing_type : 3265\n  DW_AT_alignment : 4243\n  DW_AT_artificial : 5263\n  DW_AT_linkage_name : 7004\n  DW_AT_import : 7862\n  DW_AT_external : 11680\n  DW_AT_declaration : 19833\n  DW_AT_const_value : 44726\n  DW_AT_sibling : 61297\n  DW_AT_accessibility : 61776\n  DW_AT_data_member_location : 62473\n  DW_AT_byte_size : 76952\n  DW_AT_decl_column : 140774\n  DW_AT_decl_line : 140778\n  DW_AT_decl_file : 140778\n  DW_AT_type : 278262\n  DW_AT_name : 297902\ndwf>\n")),(0,o.kt)("h2",{id:"debug-info-repository"},"Debug info repository"),(0,o.kt)("p",null,"The CI of Noslate Debugger will automatically track the official releases of Node.js, Alinode, and Aworker, and automatically build the corresponding debug information ",(0,o.kt)("inlineCode",{parentName:"p"},"node.typ")," file.\nThis multi-version repository has been compiled into the ",(0,o.kt)("inlineCode",{parentName:"p"},"andb")," tool, which is automatically matched and downloaded when debugging the Corefile."))}c.isMDXComponent=!0},4035:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/dwf-die-e8fdb9a77453821dadef719b737016dc.png"},4789:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/dwf-layout-95a04cd4f358aff854b509126894e52c.png"},6397:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/dwf-pic1-dfd8c080df8e53c0b0792cf365f3cb5a.png"}}]);