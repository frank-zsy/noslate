"use strict";(self.webpackChunknoslate_website=self.webpackChunknoslate_website||[]).push([[5601],{3905:(e,n,r)=>{r.d(n,{Zo:()=>f,kt:()=>p});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},f=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,f=c(e,["components","mdxType","originalType","parentName"]),d=u(r),p=o,g=d["".concat(s,".").concat(p)]||d[p]||l[p]||i;return r?t.createElement(g,a(a({ref:n},f),{},{components:r})):t.createElement(g,a({ref:n},f))}));function p(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=r[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6028:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var t=r(7462),o=(r(7294),r(3905));const i={},a="Working Directory Conventions",c={unversionedId:"noslate_workers/references/workdir",id:"noslate_workers/references/workdir",title:"Working Directory Conventions",description:"",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/noslate_workers/references/workdir.md",sourceDirName:"noslate_workers/references",slug:"/noslate_workers/references/workdir",permalink:"/en/docs/noslate_workers/references/workdir",draft:!1,editUrl:"https://github.com/noslate-project/noslate/tree/main/site/docs/noslate_workers/references/workdir.md",tags:[],version:"current",frontMatter:{}},s={},u=[],f={toc:u};function l(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},f,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"working-directory-conventions"},"Working Directory Conventions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"-- <library>                            Non-runtime configuration, the files in the directory are packaged by the distribution package, not writable, consistent for all platforms\n    |-- /bin\n    |    |-- turf                       binary file of turf\n    |    |-- node                       with release node\n    |    |-- aworker                    with release aworker\n    |-- /scheduler/lib/turf/            JS wrapper for invoking turf by agent\n    |-- /delegate\n    |-- index.js\n    |-- package.json\n\n-- /<workdir>                           Configurable\n    |-- /noslated\n    |    |-- /caches\n    |    |    |-- <uri>                    Worker function code package cache directory, unique to the code package (image)\n    |    |    |    |-- f.yaml               user config\n    |    |    |    |-- config.json        user config\n    |    |-- /bundles                    Image directory, unique to Worker functions\n    |    |    |-- <uri>                    Worker function unique identify\n    |    |    |    |-- code\n    |    |    |    |    |-- f.yaml          user config\n    |    |    |    |    |-- config.json   user config\n    |    |    |    |-- config.json        Unique to Worker functions, created and managed by Noslated\n    |-- /turf\n    |    |-- turf.sock\n    |    |-- /runtime                    Turf runtime executable\n    |    |    |-- nodejs-v16                Can be used as a rootfs, corresponding to config.json | turf.runtime\n    |    |    |     |-- bin\n    |    |    |     |    |-- node\n    |    |    |-- aworker                Can be used as a rootfs, corresponding to config.json | turf.runtime\n    |    |    |     |-- bin\n    |    |    |     |    |-- aworker\n    |    |-- /overlay\n    |    |    |-- <id>                     Worker instance ID, unique to the Worker instance\n    |    |    |     |-- data               User modified files\n    |    |    |     |-- work               overlayfs temporary data\n    |    |    |     |-- merged           overlayfs mount point\n    |    |    |     |-- code              Code package, corresponding to config.json | turf.code\n    |    |-- /sandbox                  Turf workdir\n    |    |    |-- <id>                     Worker instance ID, unique to the Worker instance\n    |    |    |     |-- status             turf status information, can be read directly (json format)\n    |    |    |     |-- config.json      turf creates the spec of the Worker instance, the spec specified when creating\n\n-- /<log-dir>                          Configurable\n    |-- <name>                         Worker instance name, unique to the Worker function\n    |    |-- <id>                         Worker instance ID, which will be printed in the agent log when invoked, unique to the Worker instance\n    |    |     |-- stderr                 Worker instance stderr\n    |    |     |-- stdout                 Worker instance stdout\n")))}l.isMDXComponent=!0}}]);