"use strict";(self.webpackChunknoslate_website=self.webpackChunknoslate_website||[]).push([[8913],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=d(t),b=o,g=u["".concat(s,".").concat(b)]||u[b]||p[b]||l;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=u;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var d=2;d<l;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2264:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var a=t(7462),o=(t(7294),t(3905));const l={},i="Andb",r={unversionedId:"debugger/andb/intro",id:"debugger/andb/intro",title:"Andb",description:"Noslate Debugger is a v8 offline debugging tool for gdb/lldb, generally used to debug v8 core files.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/debugger/andb/intro.md",sourceDirName:"debugger/andb",slug:"/debugger/andb/intro",permalink:"/en/docs/debugger/andb/intro",draft:!1,editUrl:"https://github.com/noslate-project/noslate/tree/main/site/docs/debugger/andb/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"debugger",previous:{title:"Noslate Debugger Introduction",permalink:"/en/docs/debugger/intro"},next:{title:"Debug with Linux",permalink:"/en/docs/debugger/andb/env_linux"}},s={},d=[{value:"The mainly ability",id:"the-mainly-ability",level:3},{value:"Supported debug environments",id:"supported-debug-environments",level:3},{value:"Usage",id:"usage",level:3},{value:"Isolate location",id:"isolate-location",level:3},{value:"C++ debug",id:"c-debug",level:3},{value:"Command line",id:"command-line",level:3},{value:"heap space new|old|code|lo|...",id:"heap-space-newoldcodelo",level:4},{value:"heap page &lt;page_address&gt;",id:"heap-page-page_address",level:4},{value:"heap summary old|code|lo|...",id:"heap-summary-oldcodelo",level:4},{value:"heap find old|lo|... &lt;tag&gt;",id:"heap-find-oldlo-tag",level:4},{value:"heap snapshot",id:"heap-snapshot",level:4},{value:"v8 inspect &lt;tag&gt;",id:"v8-inspect-tag",level:4},{value:"v8 bt",id:"v8-bt",level:4}],c={toc:d};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"andb"},"Andb"),(0,o.kt)("p",null,"Noslate Debugger is a v8 offline debugging tool for gdb/lldb, generally used to debug v8 core files."),(0,o.kt)("p",null,"The following will use ",(0,o.kt)("inlineCode",{parentName:"p"},"andb")," to refer to this project, which is the abbreviation of Alibaba Noslate Debugger."),(0,o.kt)("h3",{id:"the-mainly-ability"},"The mainly ability"),(0,o.kt)("p",null,"1) C++ debugging ability"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},'Official node/alinode/aworker are all released as Release versions, which cannot be debugged without debugging information.\nandb completes non-position-related debugging information through the "typ" file, and provides C++ debugging capabilities, such as structure display.')),(0,o.kt)("p",null,"2) Check v8 heap objects (d8)"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"d8 or node_g can provide %DebugPrint to inspect the details of the object,\nandb provides the ability to %DebugPrint on Release builds without requiring the app to recompile the Debug build.")),(0,o.kt)("p",null,"3) Analysis Time Capability (Heap Snapshot)"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Heap Snapshot is the main means of locating the OOM problem. The acquisition of traditional Heap Snapshot depends on the high runtime overhead.\nWith andb, you can export Heap Snapshot offline from the core file.")),(0,o.kt)("p",null,"4) Automatic matching of debugging information"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Generate a core file through Arthur or kernel, which contains the BuildId information of the node binary,\nandb can automatically match the version of node and alinode official Release and the supporting debugging information file from the database.\nFor the core file generated by gcore, the BuildId information is not saved, and it needs to be manually matched and debugged. ")),(0,o.kt)("h3",{id:"supported-debug-environments"},"Supported debug environments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Linux + gdb 10.0+"),(0,o.kt)("li",{parentName:"ul"},"Linux + lldb 8.0+"),(0,o.kt)("li",{parentName:"ul"},"MacOS + lldb 11+ (catelina, bigsur, monterey)"),(0,o.kt)("li",{parentName:"ul"},"MacOS + gdb 10.0+ (andb-gdb)")),(0,o.kt)("p",null,"Currently only x86_64 core file analysis is supported."),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,'1) Clone the andb project\n2) Use env.sh to set environment variables\n3) Use the "andb" command to start debugging '),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Set environment variables, alias andb\ngit clone git@github.com:noslate-project/debugger.git\ncd andb\nsource env.sh\n")),(0,o.kt)("p",null,"For core files generated by Arthur or kernel, you can select gdb/lldb to start offline debugging."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Use lldb to start debug\nandb -l -c core\n\n# or use gdb to start debug\nandb -g -c core\n\n")),(0,o.kt)("p",null,"For the core file generated by gcore, you need to prepare binary, supporting node.typ file,\nUse lldb to start debugging, andb will load the node binary and the node.typ file in the current directory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"andb -l node -c core\n# or\nandb -g node -c core\n")),(0,o.kt)("h3",{id:"isolate-location"},"Isolate location"),(0,o.kt)("p",null,"andb currently provides two built-in methods to quickly find Isolate,\nFirst, through the control field of the page\nSecond, search through the isolate pointer retained on the current stack"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# find isolate by page\n(gdb) isolate guess page\n(class v8::internal::Isolate *) $isolate = 0x416ec60\n\n# find isolate by stack\n(gdb) isolate guess stack\n(class v8::internal::Isolate *) $isolate = 0x416ec60\n")),(0,o.kt)("h3",{id:"c-debug"},"C++ debug"),(0,o.kt)("p",null,'andb associates important objects through Convenience variables, which are prefixed with "\\$" for such debugger variables.\nFor example, after v8::internal::Isolate is located in isolate, you can use "\\$isolate" to access the structure content, similar to "\\$node" and so on.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) p $isolate->heap_.old_space_\n$1 = (class v8::internal::OldSpace *) 0x421de80\n\n(gdb) p $isolate->heap_.gc_state_\n$2 = v8::internal::Heap::NOT_IN_GC\n")),(0,o.kt)("h3",{id:"command-line"},"Command line"),(0,o.kt)("p",null,"andb provides a unified command line through the debugger's command line interface.  "),(0,o.kt)("p",null,'The command line is composed of "prefix + subcommand + command parameter", different prefixes,'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"isolate : isolate the core structure command"),(0,o.kt)("li",{parentName:"ul"},"heap : v8 heap related commands"),(0,o.kt)("li",{parentName:"ul"},"v8 : v8 related debug commands"),(0,o.kt)("li",{parentName:"ul"},"node : node related debugging commands")),(0,o.kt)("p",null,'Command line completion can be provided under gdb, but due to the implementation of lldb, automatic completion cannot be provided. Subcommands can be obtained using "?".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) heap ?\nsnapshot page dump space\n(gdb) iso ?\nguess\n")),(0,o.kt)("p",null,"In the absence of conflict, command abbreviations can be used, such as"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# gdb\n(gdb) iso g p\n(class v8::internal::Isolate *) $isolate = 0x416ec60\n(gdb) iso g s\n(class v8::internal::Isolate *) $isolate = 0x416ec60\n\n# lldb\n(lldb) iso g p\n(v8::internal::Isolate *) $isolate = 0x416ec60L\n(lldb) iso g s\n(v8::internal::Isolate *) $isolate = 0x416ec60L\n")),(0,o.kt)("h4",{id:"heap-space-newoldcodelo"},"heap space ","[new|old|code|lo|...]"),(0,o.kt)("p",null,"Display a summary of each Space in the v8 heap,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) heap space\nSPACE NAME          COMMIT        MAX\nRO_SPACE      :     151552     262144\nMAP_SPACE     :   22548480   38014976\nCODE_SPACE    :    8749056   12681216\nCODE_LO_SPACE :      49152      49152\nOLD_SPACE     :  328626176  883847168\nLO_SPACE      :  707457024 1462448128\nNEW_LO_SPACE  :     299008  418394112\nNEW_SPACE     :   33554432\n - from_space :   16777216\n - to_space   :   16777216\nTotal Committed 1101434880\n")),(0,o.kt)("p",null,"Show all pages in the specified spacepages"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) heap spa map\n 0x30b45bd80000 : size(4096), sweep(1), start(0x30b45bd80120)\n 0x2da021080000 : size(262144), sweep(1), start(0x2da021080120)\n ...\n 0x1b609b100000 : size(262144), sweep(0), start(0x1b609b100120)\n 0x3edd93fc0000 : size(262144), sweep(0), start(0x3edd93fc0120)\nTotal 32 pages.\n(gdb)\n")),(0,o.kt)("h4",{id:"heap-page-page_address"},"heap page \\<page_address",">"),(0,o.kt)("p",null,"Print in-page objects,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) heap page 0x3edd93fc0000\n...\n0x3edd93ffff30 : size(72), mapsize(72), MAP_TYPE\n0x3edd93ffff78 : size(72), mapsize(72), MAP_TYPE\n0x3edd93ffffc0 : size(64), mapsize(0), FREE_SPACE_TYPE\n")),(0,o.kt)("h4",{id:"heap-summary-oldcodelo"},"heap summary ","[old|code|lo|...]"),(0,o.kt)("p",null,"The digest specifies the number of objects on the Space and the number of bytes occupied,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) heap sum old\n...\n0x3490b88c58c1:    42991      1375712 LOAD_HANDLER_TYPE\n0x3490b88c0891:    43315      5587496 SCOPE_INFO_TYPE\n0x3490b88c11e1:    45508     19311584 NAME_DICTIONARY_TYPE\n0x14295ec40439:    47647      2668232 JS_OBJECT_TYPE\n0x1f9e87f00439:    48833      3515976 JS_OBJECT_TYPE\n0x3490b88c1bb9:    48926      1402440 INTERNALIZED_STRING_TYPE\n0x3490b88c1781:    49847      1196328 UNCOMPILED_DATA_WITHOUT_PREPARSE_DATA_TYPE\n0x3490b88c0241:    54119      7636728 DESCRIPTOR_ARRAY_TYPE\n0x3490b88c02e1:    57338       458704 FILLER_TYPE\n0x3490b88c12b9:    58272      1398528 FEEDBACK_CELL_TYPE\n0x3490b88c1931:    58568     69492736 STRING_TYPE\n0x14295ec403f1:    60238      3373328 JS_FUNCTION_TYPE\n0x3490b88c08d9:    63642      3563952 SHARED_FUNCTION_INFO_TYPE\n0x3490b88c04f9:    88135      1410160 HEAP_NUMBER_TYPE\n0x3490b88c1979:    91588      2930816 CONS_ONE_BYTE_STRING_TYPE\n0x3490b88c1421:    94980      4937800 PROPERTY_ARRAY_TYPE\n0x14295ec40ca9:   131817      4218144 JS_ARRAY_TYPE\n0x14295ec40751:   132339      8469696 JS_FUNCTION_TYPE\n0x14295ec403a9:   171768     10993152 JS_FUNCTION_TYPE\n0x14295ec40c61:   175716     10745528 FUNCTION_CONTEXT_TYPE\n0x3490b88c0729:   176399     20811432 FIXED_ARRAY_TYPE\n0x3490b88c0409:   184370     14378824 ONE_BYTE_INTERNALIZED_STRING_TYPE\n0x3490b88c0849:   643297     52945368 ONE_BYTE_STRING_TYPE\nShowMapSummary() takes 166.896 second(s).\n(gdb)\n")),(0,o.kt)("h4",{id:"heap-find-oldlo-tag"},"heap find ","[old|lo|...]"," \\<tag",">"),(0,o.kt)("p",null,"Finds objects referencing tag on the specified heap."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) heap find old 0xda2d6b4f4e9\n<FixedArray 0x1449d494b869>\n<FixedArray 0x1449d494c9c9>\nfind 2\n(gdb) heap find old 0x1449d494b869\n<JsArray 0x1449d494f1f9>\nfind 1\n")),(0,o.kt)("h4",{id:"heap-snapshot"},"heap snapshot"),(0,o.kt)("p",null,"Export core.heapsnapshot file from core,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) heap snap\nSynchronize: (Strong roots)\nSynchronize: (Bootstrapper)\nSynchronize: (Relocatable)\nSynchronize: (Debugger)\nSynchronize: (Compilation cache)\nSynchronize: (Builtins)\nSynchronize: (Thread manager)\nSynchronize: (Global handles)\nSynchronize: (Stack roots)\nSynchronize: (Handle scope)\nSynchronize: (Eternal handles)\nSynchronize: (Startup object cache)\nSynchronize: (Internalized strings)\nSynchronize: (External strings)\nIterated 0 RO Heap Objects\nfailed RO Heap Object: 0\n(v8::internal::AllocationSpace) v8::internal::RO_SPACE\n(v8::internal::AllocationSpace) v8::internal::MAP_SPACE\n(v8::internal::AllocationSpace) v8::internal::CODE_SPACE\n(v8::internal::AllocationSpace) v8::internal::CODE_LO_SPACE\n(v8::internal::AllocationSpace) v8::internal::OLD_SPACE\n18.6%: 999.9/sec, Object(10000), Entry(42830), Edge(119869)\n(v8::internal::AllocationSpace) v8::internal::LO_SPACE\n(v8::internal::AllocationSpace) v8::internal::NEW_LO_SPACE\n(v8::internal::AllocationSpace) v8::internal::NEW_SPACE\nIterated 46355 Objects\nfailed HeapObject: 0\nheap snapshot written to 'core.heapsnapshot'\nGenerate() takes 14.012 second(s).\n(gdb)\n")),(0,o.kt)("p",null,"Then use devtools to open the core.heapsnapshot file."),(0,o.kt)("h4",{id:"v8-inspect-tag"},"v8 inspect \\<tag",">"),(0,o.kt)("p",null,"The v8 inspect command is similar to %DebugPrint for printing detailed information about an object.\nThe input of v8 inspect is a \\<tag",">",", if it is a non-HeapObject tag, it will be displayed as Smi."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) v8 i 0xda2d6b4f4e9\n[JSObject 0xda2d6b4f4e9]\n- Properties:\n - originalColumn: <Smi 6 0x600000000>\n - name: <Oddball 0x3490b88c01b1>\n - generatedColumn: <Smi 161 0xa100000000>\n - source: <Smi 0 0x0>\n - originalLine: <Smi 81 0x5100000000>\n - generatedLine: <Smi 43 0x2b00000000>\n- Elements: []\n[Map 0x1f9e87f00439]\n- InstanceSizeInWords: 9\n- InobjectPropertiesStartOrConstructorFunctionIndex: 3\n- UsedOrUnusedInstanceSizeInWords: 9\n- VisitorId: 25\n- InstanceType: JS_OBJECT_TYPE (1057)\n- BitField: 0x0\n[MapBitFields1 0x0]\n- HasNonInstancePrototype: 0\n- IsCallable: 0\n- HasNamedInterceptor: 0\n- HasIndexedInterceptor: 0\n- IsUndetectable: 0\n- IsAccessCheckNeeded: 0\n- IsConstructor: 0\n- HasPrototypeSlot: 0\n- BitField2: 0x19\n[MapBitFields2 0x19]\n- NewTargetIsBase: 1\n- IsImmutablePrototype: 0\n- Unused: 0\n- ElementsKind: HOLEY_ELEMENTS (3)\n- BitField3: 0x8c01bff\n[MapBitFields3 0x8c01bff]\n- EnumLength: 1023\n- NumberOfOwnDescriptors: 6\n- IsPrototypeMap: 0\n- IsDictionaryMap: 0\n- OwnsDescriptors: 1\n- IsInRetainedMapList: 1\n- IsDeprecated: 0\n- IsUnstable: 0\n- IsMigrationTarget: 0\n- IsExtensible: 1\n- MayHaveIntrestingSymbols: 0\n- ConstructionCounter: 0\n- Prototype: <JsObject 0x2beeb7f52579>\n- ConstructorOrBackPointerOrNativeContext: <Map 0x1f9e87f003f1>\n- InstanceDescriptors: <DescriptorArray 0x2beeb7f525b1>\n- DependentCode: <WeakFixedArray 0x21f08217e919>\n- PrototypeValidityCell: <Cell 0x21f08217e411>\n- TransitionsOrPrototypeInfo: <Smi 0 0x0>\n[HeapObject]\n - MapWord: 0x1f9e87f00439\n - Size: 72\n - Page: 0xda2d6b40000\n   - NextObject: 0xda2d6b4f531\n")),(0,o.kt)("h4",{id:"v8-bt"},"v8 bt"),(0,o.kt)("p",null,"Display v8 call frame information, JS functions, this, parameters, etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"(gdb) v8 bt\n#0  0x00000e5ce6f04010 home(this=<JsObject 0x620f5fe24e9>) at /disks/banana/zlei/alibaba/andb/test/backtrace/deadloop/dist/controller/home.controller.js:0\n#1  0x0000000001462119 <arguments_adaptor>()\n#2  0x00000000014681e2 (anonymous)(this=<Oddball 0x5d12f880471>, arg0=<JsObject 0x620f5fc8421>, arg1=<JsBoundFunction 0x620f5fe1c39>) at /disks/banana/zlei/alibaba/andb/test/backtrace/deadloop/node_modules/@midwayjs/core/dist/common/webGenerator.js:0\n#3  0x0000000001494db0 (anonymous)(this=<JsGlobalProxy 0x12b3e36823e1>, arg0=<JsObject 0x620f5fe24e9>) at undefined:1489\n#4  0x00000000015110ee <stub>()\n#5  0x0000000001487eda <stub>()\n#6  0x0000000001465e58 <entry>()\n#7  0x0000000000d2863b v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&)()\n#8  0x0000000000d29553 v8::internal::Execution::TryRunMicrotasks(v8::internal::Isolate*, v8::internal::MicrotaskQueue*, v8::internal::MaybeHandle<v8::internal::Object>*)()\n#9  0x0000000000d52be1 v8::internal::MicrotaskQueue::RunMicrotasks(v8::internal::Isolate*)()\n#10 0x0000000000d52fc1 v8::internal::MicrotaskQueue::PerformCheckpoint(v8::Isolate*)()\n#11 0x0000000000c38261 v8::internal::MaybeHandle<v8::internal::Object> v8::internal::(anonymous namespace)::HandleApiCallHelper<false>(v8::internal::Isolate*, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>, v8::internal::BuiltinArguments)()\n#12 0x0000000000c39eff v8::internal::Builtin_HandleApiCall(int, unsigned long*, v8::internal::Isolate*)()\n#13 0x00000000014cf459 <builtin_exit>()\n#14 0x00000000014681e2 processTicksAndRejections(this=<JsApiObject 0x12b3e3681d81>) at internal/process/task_queues.js:0\n#15 0x0000000001465efa <internal>()\n#16 0x0000000001465cd8 <entry>()\n#17 0x0000000000d281e1 v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&)()\n#18 0x0000000000d2900f v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, int, v8::internal::Handle<v8::internal::Object>*)()\n#19 0x0000000000bd4879 v8::Function::Call(v8::Local<v8::Context>, v8::Local<v8::Value>, int, v8::Local<v8::Value>*)()\n#20 0x000000000098af6e node::InternalCallbackScope::Close()()\n#21 0x000000000098c172 node::InternalMakeCallback(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)()\n#22 0x000000000099ae06 node::AsyncWrap::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)()\n#23 0x0000000000a473cd non-virtual thunk to node::(anonymous namespace)::Parser::OnStreamRead(long, uv_buf_t const&)()\n#24 0x0000000000b0fcbc node::LibuvStreamWrap::ReadStart()::{lambda(uv_stream_s*, long, uv_buf_t const*)#2}::_FUN(uv_stream_s*, long, uv_buf_t const*)()\n#25 0x00000000014551d2 uv__read(stream=<optimized out>) at ../deps/uv/src/unix/stream.c:1259\n#26 0x00000000014558d8 uv__stream_io(loop=<optimized out>, w=<optimized out>, events=<optimized out>) at ../deps/uv/src/unix/stream.c:1326\n#27 0x000000000145c2e5 uv__io_poll(loop=<optimized out>, timeout=<optimized out>) at ../deps/uv/src/unix/linux-core.c:472\n#28 0x0000000001449595 uv_run(loop=<optimized out>, mode=<optimized out>) at ../deps/uv/src/unix/core.c:394\n#29 0x0000000000a6fef5 node::NodeMainInstance::Run()()\n#30 0x00000000009f7c41 node::Start(int, char**)()\n#31 0x00007f71ae0fe445 __libc_start_main(main=0x9885b0 <main>, argc=2, argv=0x7fff155e5378, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fff155e5368) at ../csu/libc-start.c:266\n#32 0x0000000000989c5d _start()\n")))}p.isMDXComponent=!0}}]);