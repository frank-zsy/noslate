"use strict";(self.webpackChunknoslate_website=self.webpackChunknoslate_website||[]).push([[6819],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||a;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},s="Outbound Service Proxy",i={unversionedId:"noslate_workers/references/outbound",id:"noslate_workers/references/outbound",title:"Outbound Service Proxy",description:"The runtime Aworker has limited file I/O and network I/O capabilities and therefore cannot access external services. In order to solve this problem, the outbound service proxy capability is added to Data Plane. In order to make it easier to understand, the Dapr calling format is selected as a reference, and the corresponding interface is designed.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/noslate_workers/references/outbound.md",sourceDirName:"noslate_workers/references",slug:"/noslate_workers/references/outbound",permalink:"/en/docs/noslate_workers/references/outbound",draft:!1,editUrl:"https://github.com/noslate-project/noslate/tree/main/site/docs/noslate_workers/references/outbound.md",tags:[],version:"current",frontMatter:{},sidebar:"common",previous:{title:"Noslated SDK",permalink:"/en/docs/noslate_workers/references/sdk"},next:{title:"Gateway",permalink:"/en/docs/noslate_workers/references/gateway"}},c={},l=[],p={toc:l};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"outbound-service-proxy"},"Outbound Service Proxy"),(0,o.kt)("p",null,"The runtime ",(0,o.kt)("a",{parentName:"p",href:"/docs/noslate_workers/design/aworker/intro"},"Aworker")," has limited file I/O and network I/O capabilities and therefore cannot access external services. In order to solve this problem, the outbound service proxy capability is added to Data Plane. In order to make it easier to understand, the Dapr calling format is selected as a reference, and the corresponding interface is designed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface DaprInvokeOptions {\n    app: string;\n    methodName: string;\n    data: Buffer;\n}\n\ninterface DaprBindingOptions {\n    name: string;\n    metadata: DaprBindingMetadata;\n    operation: string;\n    data: Buffer;\n}\n\ninterface DaprResponse {\n    status: number;\n    data: Buffer;\n}\n\ninterface DaprAdaptor {\n    ready(): Promise<void>;\n    invoke(params: DaprInvokeOptions): Promise<DaprResponse>;\n    binding(params: DaprBindingOptions): Promise<DaprResponse>;\n}\n")),(0,o.kt)("p",null,"Also, when exporting modules, use the CommonJS format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"module.exports = class DaprAdaptor {};\n")),(0,o.kt)("p",null,"If necessary, you can refer to the document ",(0,o.kt)("a",{parentName:"p",href:"/en/docs/noslate_workers/tutorials/custom_outbound"},"Custom Outbound Service Proxy")," to implement the required Outbound Service Proxy."),(0,o.kt)("p",null,"When using, you need to pass the proxy module address into Data Plane through SDK, and Data Plane will initialize the instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// set DaprAdaptor\nconst NoslatedClient = require(process.env.NOSLATE_PATH).NoslatedClient;\nconst agent = new NoslatedClient();\n\nawait agent.setDaprAdaptor(modulePath);\n\n// When initialized, the logger implementation will be passed in\nconst Clz = require(modulePath);\nconst adapter = new Clz(logger);\n\nawait adapter.ready();\n")))}d.isMDXComponent=!0}}]);