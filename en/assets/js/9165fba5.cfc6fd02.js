"use strict";(self.webpackChunknoslate_website=self.webpackChunknoslate_website||[]).push([[1161],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),u=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},s=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),s=u(t),g=r,b=s["".concat(d,".").concat(g)]||s[g]||p[g]||i;return t?a.createElement(b,l(l({ref:n},c),{},{components:t})):a.createElement(b,l({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=s;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},5271:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const i={},l="Debugging with MacOS",o={unversionedId:"debugger/andb/env_macos",id:"debugger/andb/env_macos",title:"Debugging with MacOS",description:"System dependencies",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/debugger/andb/env_macos.md",sourceDirName:"debugger/andb",slug:"/debugger/andb/env_macos",permalink:"/en/docs/debugger/andb/env_macos",draft:!1,editUrl:"https://github.com/noslate-project/noslate/tree/main/site/docs/debugger/andb/env_macos.md",tags:[],version:"current",frontMatter:{},sidebar:"debugger",previous:{title:"Debug with Linux",permalink:"/en/docs/debugger/andb/env_linux"},next:{title:"Command Line",permalink:"/en/docs/debugger/andb/cli"}},d={},u=[{value:"System dependencies",id:"system-dependencies",level:2},{value:"Debugging with XCode&#39;s built-in lldb",id:"debugging-with-xcodes-built-in-lldb",level:2},{value:"Debug with precompiled andb-gdb",id:"debug-with-precompiled-andb-gdb",level:2},{value:"Configuration tool",id:"configuration-tool",level:2},{value:"General debugging",id:"general-debugging",level:2},{value:"Manual tuning method",id:"manual-tuning-method",level:2}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"debugging-with-macos"},"Debugging with MacOS"),(0,r.kt)("h2",{id:"system-dependencies"},"System dependencies"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Catalina+"),(0,r.kt)("li",{parentName:"ul"},"LLDB 11.0+ (Xcode self-contained)"),(0,r.kt)("li",{parentName:"ul"},"GDB 10.2 (by ",(0,r.kt)("inlineCode",{parentName:"li"},"andb-gdb"),")")),(0,r.kt)("h2",{id:"debugging-with-xcodes-built-in-lldb"},"Debugging with XCode's built-in lldb"),(0,r.kt)("p",null,"The lldb that comes with xcode can be installed, no additional installation is required."),(0,r.kt)("h2",{id:"debug-with-precompiled-andb-gdb"},"Debug with precompiled andb-gdb"),(0,r.kt)("p",null,"The default gdb in the ",(0,r.kt)("inlineCode",{parentName:"p"},"brew")," repository is only suitable for the Corefile of the MacOS platform. To debug the Corefile of the Linux platform, you need to recompile, or use the andb precompiled version.\n",(0,r.kt)("inlineCode",{parentName:"p"},"andb-gdb")," is a multi-platform precompiled gdb tool, the current version is ",(0,r.kt)("inlineCode",{parentName:"p"},"10.2"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$git clone git@github.com:noslate-project/andb-gdb.git\n\n# Also need to add the gdb environment variable\n$cd andb-gdb\n$source env.sh\nx86_64-Darwin\n")),(0,r.kt)("h2",{id:"configuration-tool"},"Configuration tool"),(0,r.kt)("p",null,"Clone the ",(0,r.kt)("inlineCode",{parentName:"p"},"andb")," repository"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:noslate-project/andb.git\n")),(0,r.kt)("p",null,"Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"andb")," environment variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$cd andb\n$source env.sh\nandb loader enabled, please use 'andb' command to start debugging.\n")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"andb")," to check the paths used"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[zlei@IntelMac andb]$ andb\n/Users/zlei/demo/andb/loader\n")),(0,r.kt)("h2",{id:"general-debugging"},"General debugging"),(0,r.kt)("p",null,"Debug with ",(0,r.kt)("inlineCode",{parentName:"p"},"gdb")," and load the core.pid file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"andb -l -c core.pid\n")),(0,r.kt)("p",null,"Debug with ",(0,r.kt)("inlineCode",{parentName:"p"},"lldb")," and load the core.pid file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"andb -g -c core.<pid>\n")),(0,r.kt)("h2",{id:"manual-tuning-method"},"Manual tuning method"),(0,r.kt)("p",null,"When debugging core files of unofficial distributions, manual debugging methods are required. At this time, the following files need to be prepared and placed in the same directory."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Companion binaries, such as node, must be paired with the core.pid file."),(0,r.kt)("li",{parentName:"ul"},"The supporting node.typ file can also directly use the same version of the node.typ file as the official release."),(0,r.kt)("li",{parentName:"ul"},"core.pid file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# debug with gdb\nandb -g node -c core.pid\n\n# or debug with lldb\nandb -l node -c core.pid\n")))}p.isMDXComponent=!0}}]);