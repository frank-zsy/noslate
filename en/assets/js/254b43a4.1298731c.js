"use strict";(self.webpackChunknoslate_website=self.webpackChunknoslate_website||[]).push([[5274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),h=o,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||r;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6117:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const r={},i="Noslate Debugger Introduction",s={unversionedId:"debugger/intro",id:"debugger/intro",title:"Noslate Debugger Introduction",description:"Noslate Debugger",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/debugger/intro.md",sourceDirName:"debugger",slug:"/debugger/intro",permalink:"/en/docs/debugger/intro",draft:!1,editUrl:"https://github.com/noslate-project/noslate/tree/main/site/docs/debugger/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"debugger",next:{title:"Andb",permalink:"/en/docs/debugger/andb/intro"}},l={},u=[{value:"What is Noslate Debugger",id:"what-is-noslate-debugger",level:2},{value:"Easy to use",id:"easy-to-use",level:3},{value:"Adapt to Serverless",id:"adapt-to-serverless",level:2},{value:"Corefile based &quot;snapshot&quot;",id:"corefile-based-snapshot",level:3},{value:"Smaller business impact",id:"smaller-business-impact",level:3},{value:"Debug info repository",id:"debug-info-repository",level:2}],p={toc:u};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"noslate-debugger-introduction"},"Noslate Debugger Introduction"),(0,o.kt)("div",{style:{maxWidth:"800px"}},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Noslate Debugger",src:n(2223).Z,width:"1270",height:"339"}))),(0,o.kt)("h2",{id:"what-is-noslate-debugger"},"What is Noslate Debugger"),(0,o.kt)("p",null,"Noslate Debugger is an offline analysis tool for V8 applications. It can analyze the Corefile (Core file) generated by applications such as Node.js."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Inspect Node.js/V8 application's structure, stack, etc."),(0,o.kt)("li",{parentName:"ul"},"Check various object information in the V8 heap"),(0,o.kt)("li",{parentName:"ul"},"Export Heap Snapshot from Corefile"),(0,o.kt)("li",{parentName:"ul"},"Get Corefile without business sense (through Arthur tool)"),(0,o.kt)("li",{parentName:"ul"},"Supported Node.js / Alinode / AWorker LTS official release")),(0,o.kt)("h3",{id:"easy-to-use"},"Easy to use"),(0,o.kt)("p",null,"Analyze Corefiles on MacOS/Linux/Windows (via WSL) with just one command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"andb -l -c core.123\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"andb")," is an offline analysis tool in the Noslate Deubber suite, based on the secondary development of the ",(0,o.kt)("inlineCode",{parentName:"p"},"gdb"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"lldb")," plugin system.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"andb")," will automatically download the version of Node.js that matches the Core generation and start debugging. You can choose the ",(0,o.kt)("inlineCode",{parentName:"p"},"gdb")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"lldb")," tool you are familiar with to start debugging."),(0,o.kt)("video",{controls:!0},(0,o.kt)("source",{src:"/demo_andb.mp4"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Demonstrate loading Corefile and automatically matching version and debugging information"),(0,o.kt)("li",{parentName:"ul"},"Demonstrate positioning and printing of the Isolate structure"),(0,o.kt)("li",{parentName:"ul"},"Demo V8 Heap Space and Page information"),(0,o.kt)("li",{parentName:"ul"},"Demonstrate V8 Heap Summary and Inspect objects"),(0,o.kt)("li",{parentName:"ul"},"Demo Heap Snapshot export")),(0,o.kt)("h2",{id:"adapt-to-serverless"},"Adapt to Serverless"),(0,o.kt)("p",null,"For a long time, Node.js application development has been using Inspector to debug code or heap snapshot (Heap Snapshot) to locate OOM problems. These locally developed tools and features support the development of huge applications."),(0,o.kt)("p",null,"Serverless applications usually use a large number of containers with short life cycles and small sizes, but it is not easy to obtain debugging and diagnostic capabilities on such containers, which makes serverless applications in a relatively black box situation for a long time."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Inspector requires a stable and live internet connection"),(0,o.kt)("li",{parentName:"ul"},"Heap Snapshot requires more computing and memory resources")),(0,o.kt)("h3",{id:"corefile-based-snapshot"},'Corefile based "snapshot"'),(0,o.kt)("p",null,'Whether it is a V8 object or a heap snapshot, it is the storage of "information" in memory, and the Inspector function can extract this information at "runtime".\nNoslate Debugger transfers this part of debugging and diagnosis capabilities to offline through Corefile, so that the original online diagnosis and debugging with high real-time requirements can be transformed into integrated use with simple file upload.'),(0,o.kt)("p",null,"Provides a sense of debugging and diagnosis that is close to the user's local development on the user's local or cloud service."),(0,o.kt)("div",{style:{maxWidth:"700px"}},(0,o.kt)("p",null,(0,o.kt)("img",{alt:"\u79bb\u7ebf\u5206\u6790",src:n(3491).Z,width:"861",height:"519"}))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},'Corefile (specifically the GNU Corefile format) mainly records the memory and register dumps of the Node.js process (CoreDump: the process of memory to disk).\nSo it is also the complete "information" of the process, which is used as a debug carrier for Linux system applications ',(0,o.kt)("inlineCode",{parentName:"p"},"Crash (lossy)"),", and can also be used for ",(0,o.kt)("inlineCode",{parentName:"p"},"GCore (lossless)")," to generate process snapshots for offline analysis.\nIf OOM occurs in Node.js, the ",(0,o.kt)("inlineCode",{parentName:"p"},"core.<pid>")," file is generally generated. Because the memory copy is large, it takes up a lot of disk space, and frequent crashes will cause the disk space to be exhausted.")),(0,o.kt)("h3",{id:"smaller-business-impact"},"Smaller business impact"),(0,o.kt)("p",null,'Compared with the original online "heap snapshot", the impact on the business is as long as several minutes, and only affects the business in RT seconds (through ',(0,o.kt)("inlineCode",{parentName:"p"},"GCore"),"), or even only tens of milliseconds (through ",(0,o.kt)("inlineCode",{parentName:"p"},"Arthur"),")."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Corefile"),' snapshot also does not have any runtime "add oil and vinegar", so it is also suitable for those objects that have not been GCed, such as diagnosing business processing that has ended.'),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Arthur")," is a tool developed by Noslate Debugger for low-impact acquisition of ",(0,o.kt)("inlineCode",{parentName:"p"},"core files"),", using fork to reduce process pause time, and LZ4 compression to reduce dump volume.\nExtract memory snapshots by fork child processes without affecting the continued operation of the target business process, further reducing the impact of business process RT to millisecond level.\nUsually a ",(0,o.kt)("inlineCode",{parentName:"p"},"Core file")," can be compressed to about 20% of the original size, depending on whether the information is compressible, the compression rate of text is larger.")),(0,o.kt)("p",null,"Online environment capture with business traffic, the business impact is 31.106 milliseconds, and the Corefile size is 338 MB (the process originally used 1.44 GB of physical memory)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$arthur -p 13481\narthur[14380] I: thread: 13482\narthur[14380] I: thread: 13483\narthur[14380] I: thread: 13484\narthur[14380] I: thread: 13485\narthur[14380] I: thread: 13486\narthur[14380] I: thread: 13487\narthur[14380] I: thread: 13497\narthur[14380] I: thread: 13498\narthur[14380] I: thread: 13499\narthur[14380] I: thread: 13500\narthur[14380] I: remote mmap at 0x7f1e596a33a0\narthur[14380] I: remote fork at 0x7f1e5966fed0\narthur[14380] I: mmap = 0x7f1e5a7ce000\narthur[14380] I: child_pid = 14381\narthur[14380] I: munmap = 0\narthur[14380] W: pread mem(0x7ffe597aa000) failed(5).\narthur[14380] W: pread mem(0xffffffffff600000) failed(22).\narthur[14380] I: waitpid = 14381\narthur[14380] I: Process 13481 paused 31.106 ms.\narthur[14380] I: Compressed 1437173002 bytes into 337922551 bytes ==> 23.51%\n")),(0,o.kt)("h2",{id:"debug-info-repository"},"Debug info repository"),(0,o.kt)("p",null,"For traditional C++ programs, only the binary compiled into the Debug version can debug the ability to view structure information, etc. The reason is that the compiler adds DebugInfo (debug information) when compiling.\nDebug is very large, and ",(0,o.kt)("inlineCode",{parentName:"p"},"node_g")," is often more than 1GB, so the official release usually adopts the Release release.\nNoslate Debugger builds a LTS version of the debug information library for Node.js / Alinode / Aworker,\nThe extra debugging information is encapsulated in the ",(0,o.kt)("inlineCode",{parentName:"p"},"node.typ")," file and combined and compressed, so that the file size is about 10MB,\nAlso includes those historical versions that have been released."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"andb")," also provides multi-version offline debugging capabilities based on the debugging information library."))}d.isMDXComponent=!0},3491:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/andb-pic1-ce62da097b57718a9c5905fed9ed3d34.png"},2223:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/noslate-db-84c936ded353dcea2260f173b8213cff.png"}}]);